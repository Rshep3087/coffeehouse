// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package web

import (
	"context"
	"sync"
)

// Ensure, that CoffeeImageProviderMock does implement CoffeeImageProvider.
// If this is not the case, regenerate this file with moq.
var _ CoffeeImageProvider = &CoffeeImageProviderMock{}

// CoffeeImageProviderMock is a mock implementation of CoffeeImageProvider.
//
//	func TestSomethingThatUsesCoffeeImageProvider(t *testing.T) {
//
//		// make and configure a mocked CoffeeImageProvider
//		mockedCoffeeImageProvider := &CoffeeImageProviderMock{
//			GetImageURLFunc: func(ctx context.Context) string {
//				panic("mock out the GetImageURL method")
//			},
//		}
//
//		// use mockedCoffeeImageProvider in code that requires CoffeeImageProvider
//		// and then make assertions.
//
//	}
type CoffeeImageProviderMock struct {
	// GetImageURLFunc mocks the GetImageURL method.
	GetImageURLFunc func(ctx context.Context) string

	// calls tracks calls to the methods.
	calls struct {
		// GetImageURL holds details about calls to the GetImageURL method.
		GetImageURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetImageURL sync.RWMutex
}

// GetImageURL calls GetImageURLFunc.
func (mock *CoffeeImageProviderMock) GetImageURL(ctx context.Context) string {
	if mock.GetImageURLFunc == nil {
		panic("CoffeeImageProviderMock.GetImageURLFunc: method is nil but CoffeeImageProvider.GetImageURL was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetImageURL.Lock()
	mock.calls.GetImageURL = append(mock.calls.GetImageURL, callInfo)
	mock.lockGetImageURL.Unlock()
	return mock.GetImageURLFunc(ctx)
}

// GetImageURLCalls gets all the calls that were made to GetImageURL.
// Check the length with:
//
//	len(mockedCoffeeImageProvider.GetImageURLCalls())
func (mock *CoffeeImageProviderMock) GetImageURLCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetImageURL.RLock()
	calls = mock.calls.GetImageURL
	mock.lockGetImageURL.RUnlock()
	return calls
}

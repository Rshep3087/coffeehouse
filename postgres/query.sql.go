// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO public.recipes (
    recipe_name, brew_method, coffee_weight, weight_unit, grind_size, water_weight, water_unit, water_temp, water_temp_unit
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, recipe_name, brew_method, coffee_weight, weight_unit, grind_size, water_weight, water_unit, water_temp, water_temp_unit
`

type CreateRecipeParams struct {
	RecipeName    string          `json:"recipe_name"`
	BrewMethod    BrewMethod      `json:"brew_method"`
	CoffeeWeight  float64         `json:"coffee_weight"`
	WeightUnit    WeightUnit      `json:"weight_unit"`
	GrindSize     int32           `json:"grind_size"`
	WaterWeight   float64         `json:"water_weight"`
	WaterUnit     string          `json:"water_unit"`
	WaterTemp     sql.NullFloat64 `json:"water_temp"`
	WaterTempUnit sql.NullString  `json:"water_temp_unit"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.RecipeName,
		arg.BrewMethod,
		arg.CoffeeWeight,
		arg.WeightUnit,
		arg.GrindSize,
		arg.WaterWeight,
		arg.WaterUnit,
		arg.WaterTemp,
		arg.WaterTempUnit,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeName,
		&i.BrewMethod,
		&i.CoffeeWeight,
		&i.WeightUnit,
		&i.GrindSize,
		&i.WaterWeight,
		&i.WaterUnit,
		&i.WaterTemp,
		&i.WaterTempUnit,
	)
	return i, err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, recipe_name, brew_method, coffee_weight, weight_unit, grind_size, water_weight, water_unit, water_temp, water_temp_unit FROM public.recipes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.RecipeName,
		&i.BrewMethod,
		&i.CoffeeWeight,
		&i.WeightUnit,
		&i.GrindSize,
		&i.WaterWeight,
		&i.WaterUnit,
		&i.WaterTemp,
		&i.WaterTempUnit,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, recipe_name, brew_method, coffee_weight, weight_unit, grind_size, water_weight, water_unit, water_temp, water_temp_unit FROM public.recipes
ORDER BY brew_method
`

func (q *Queries) ListRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.RecipeName,
			&i.BrewMethod,
			&i.CoffeeWeight,
			&i.WeightUnit,
			&i.GrindSize,
			&i.WaterWeight,
			&i.WaterUnit,
			&i.WaterTemp,
			&i.WaterTempUnit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

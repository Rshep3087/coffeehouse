// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package postgres

import (
	"database/sql"
	"fmt"
)

type BrewMethod string

const (
	BrewMethodChemex      BrewMethod = "chemex"
	BrewMethodV60         BrewMethod = "v60"
	BrewMethodFrenchpress BrewMethod = "french press"
	BrewMethodAeropress   BrewMethod = "aeropress"
)

func (e *BrewMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BrewMethod(s)
	case string:
		*e = BrewMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for BrewMethod: %T", src)
	}
	return nil
}

type TempUnit string

const (
	TempUnitF TempUnit = "F"
	TempUnitC TempUnit = "C"
)

func (e *TempUnit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TempUnit(s)
	case string:
		*e = TempUnit(s)
	default:
		return fmt.Errorf("unsupported scan type for TempUnit: %T", src)
	}
	return nil
}

type WeightUnit string

const (
	WeightUnitG  WeightUnit = "g"
	WeightUnitOz WeightUnit = "oz"
)

func (e *WeightUnit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WeightUnit(s)
	case string:
		*e = WeightUnit(s)
	default:
		return fmt.Errorf("unsupported scan type for WeightUnit: %T", src)
	}
	return nil
}

// holds coffee recipes users add
type Recipe struct {
	ID            int64           `json:"id"`
	RecipeName    string          `json:"recipe_name"`
	BrewMethod    BrewMethod      `json:"brew_method"`
	CoffeeWeight  float64         `json:"coffee_weight"`
	WeightUnit    WeightUnit      `json:"weight_unit"`
	GrindSize     int32           `json:"grind_size"`
	WaterWeight   float64         `json:"water_weight"`
	WaterUnit     string          `json:"water_unit"`
	WaterTemp     sql.NullFloat64 `json:"water_temp"`
	WaterTempUnit sql.NullString  `json:"water_temp_unit"`
}

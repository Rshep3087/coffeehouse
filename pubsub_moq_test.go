// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that PubSubMock does implement PubSub.
// If this is not the case, regenerate this file with moq.
var _ PubSub = &PubSubMock{}

// PubSubMock is a mock implementation of PubSub.
//
//	func TestSomethingThatUsesPubSub(t *testing.T) {
//
//		// make and configure a mocked PubSub
//		mockedPubSub := &PubSubMock{
//			PublishFunc: func(topic string, data []byte) error {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedPubSub in code that requires PubSub
//		// and then make assertions.
//
//	}
type PubSubMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(topic string, data []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Topic is the topic argument value.
			Topic string
			// Data is the data argument value.
			Data []byte
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *PubSubMock) Publish(topic string, data []byte) error {
	if mock.PublishFunc == nil {
		panic("PubSubMock.PublishFunc: method is nil but PubSub.Publish was just called")
	}
	callInfo := struct {
		Topic string
		Data  []byte
	}{
		Topic: topic,
		Data:  data,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(topic, data)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedPubSub.PublishCalls())
func (mock *PubSubMock) PublishCalls() []struct {
	Topic string
	Data  []byte
} {
	var calls []struct {
		Topic string
		Data  []byte
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
